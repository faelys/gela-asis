------------------------------------------------------------------------------
--                           G E L A   A S I S                              --
--       ASIS implementation for Gela project, a portable Ada compiler      --
--                          http://gela.ada-ru.org                          --
--                     - - - - - - - - - - - - - - -                        --
--            Read copyright and license at the end of this file            --
------------------------------------------------------------------------------
--  $Revision: 209 $ $Date: 2013-11-30 21:03:24 +0200 (Сб., 30 нояб. 2013) $
--  Purpose:


with Asis.Errors;
with Asis.Exceptions;
with Asis.Implementation;

package body Asis is

   procedure Raise_Inappropriate_Element
     (The_Context : Context;
      Raiser      : Wide_String);

   function Get_Context (Item : in Element_Node'Class) return Context;

   ---------
   -- "<" --
   ---------

   function "<" (Left, Right : Text_Position) return Boolean is
   begin
      return Left.Line < Right.Line or else
        (Left.Line = Right.Line and then Left.Column < Right.Column);
   end "<";

   --------------
   -- Assigned --
   --------------

   function Assigned (Item : in Element) return Boolean is
      type Element_Node_Ptr is access all Element_Node'Class;
   begin
      return Element_Node_Ptr (Item) /= null;
   end Assigned;

   --------------
   -- Assigned --
   --------------

   function Assigned (Item : in Context) return Boolean is
      type Context_Node_Ptr is access all Context_Node'Class;
   begin
      return Context_Node_Ptr (Item) /= null;
   end Assigned;

   --------------
   -- Assigned --
   --------------

   function Assigned (Item : in Compilation_Unit) return Boolean is
      type Comp_Unit_Node_Ptr is access all Compilation_Unit_Node'Class;
   begin
      return Comp_Unit_Node_Ptr (Item) /= null;
   end Assigned;

   -------------------
   -- Check_Context --
   -------------------

   procedure Check_Context (The_Context : Asis.Context) is
   begin
      if not Assigned (The_Context)
        or else not Is_Open (The_Context.all)
      then
         Implementation.Set_Status
           (Errors.Value_Error, "Null or unopen context");
         raise Exceptions.ASIS_Inappropriate_Context;
      end if;
   end Check_Context;

   -----------------------
   -- Check_Nil_Element --
   -----------------------

   procedure Check_Nil_Element
     (Element : Asis.Element;
      Raiser  : Wide_String := "")
   is
   begin
      if not Assigned (Element) then
         Raise_Inappropriate_Element (Raiser);
      end if;
   end Check_Nil_Element;

   --------------------
   -- Check_Nil_Unit --
   --------------------

   procedure Check_Nil_Unit
     (Unit    : Asis.Compilation_Unit;
      Raiser  : Wide_String := "")
   is
   begin
      if not Assigned (Unit) then
         Implementation.Set_Status
           (Errors.Value_Error, "Null compilation unit " & Raiser);
         raise Exceptions.ASIS_Inappropriate_Compilation_Unit;
      end if;
   end Check_Nil_Unit;

   --------------
   -- Children --
   --------------

   function Children (Item : access Element_Node) return Traverse_List is
   begin
      return (1 .. 0 => (False, null));
   end Children;

   -----------
   -- Clone --
   -----------

   function Clone
     (Object : Cloner;
      Item   : Element;
      Parent : Element) return Element
   is
   begin
      return Copy (Source => Item, Cloner => Object, Parent => Parent);
   end Clone;

   ----------
   -- Copy --
   ----------

   procedure Copy
     (Source : in     Element;
      Target : access Element_Node;
      Cloner : in     Cloner_Class;
      Parent : in     Element) is
   begin
      null;
   end Copy;

   ----------
   -- Copy --
   ----------

   function Copy
     (Cloner : in Cloner_Class;
      Source : in Element;
      Parent : in Element) return Element
   is
      Result : Element := Nil_Element;
   begin
      if Assigned (Source) then
         Result := Clone (Cloner, Source, Parent);

         if Assigned (Result) then
            Copy (Source, Result, Cloner, Parent);
         end if;
      end if;

      return Result;
   end Copy;

   ---------------
   -- Deep_Copy --
   ---------------

   function Deep_Copy
     (Cloner : in Cloner_Class;
      Source : in Element;
      Parent : in Element) return Element
   is
      Result      : Element;
      The_Context : constant Context := Get_Context (Parent.all);
   begin
      Set_Check_Appropriate (The_Context.all, False);
      Result := Copy (Cloner, Source, Parent);
      Set_Check_Appropriate (The_Context.all, True);
      return Result;
   end Deep_Copy;

   -----------------
   -- Get_Context --
   -----------------

   function Get_Context (Item : in Element_Node'Class) return Context is
   begin
      return Enclosing_Context (Enclosing_Compilation_Unit (Item).all);
   end Get_Context;

   ------------------
   -- Get_Equality --
   ------------------

   generic
      type Element is private;
   package Generic_Get_Equality is
      function Is_Equal (Left, Right : Element) return Boolean
        renames "=";
   end Generic_Get_Equality;

   package Get_Equality is new Generic_Get_Equality (Element);

   --------------
   -- Is_Equal --
   --------------

   function Is_Equal (Left, Right : Element) return Boolean is
   begin
      return Get_Equality.Is_Equal (Left, Right);
   end Is_Equal;

   -------------
   -- Is_List --
   -------------

   function Is_List (Item : Element_Node) return Boolean is
   begin
      return False;
   end Is_List;

   --------------------
   -- To_Wide_String --
   --------------------

   function To_Wide_String (Item : Text_Position) return Wide_String is
      Line_Image   : constant Wide_String := Natural'Wide_Image (Item.Line);
      Column_Image : constant Wide_String := Natural'Wide_Image (Item.Column);
   begin
      return Line_Image (2 .. Line_Image'Last) & ":" &
        Column_Image (2 .. Column_Image'Last);
   end To_Wide_String;

   ---------------------------------
   -- Raise_Inappropriate_Element --
   ---------------------------------

   procedure Raise_Inappropriate_Element (Raiser : Wide_String := "") is
      Text : constant Wide_String := "Inappropriate element";
   begin
      if Raiser /= "" then
         Implementation.Set_Status
           (Errors.Value_Error, Text & " in " & Raiser);
      else
         Implementation.Set_Status
           (Errors.Value_Error, Text);
      end if;

      raise Exceptions.ASIS_Inappropriate_Element;
   end Raise_Inappropriate_Element;

   ---------------------------------
   -- Raise_Inappropriate_Element --
   ---------------------------------

   procedure Raise_Inappropriate_Element
     (The_Context : Context;
      Raiser      : Wide_String)
   is
   begin
      if Check_Appropriate (The_Context.all) then
         Raise_Inappropriate_Element (Raiser);
      end if;
   end Raise_Inappropriate_Element;

   ----------------------
   -- Set_Next_Element --
   ----------------------

   procedure Set_Next_Element
     (Item : in out Element_Node;
      Next : in     Element)
   is
   begin
      Raise_Inappropriate_Element ("Set_Next_Element");
   end Set_Next_Element;

   ---------------------
   -- Without_Pragmas --
   ---------------------

   function Without_Pragmas (List : Element_List) return Element_List is
      Result : Element_List (List'Range);
      Index  : List_Index := Result'First;
   begin
      for I in List'Range loop
         if Element_Kind (List (I).all) /= A_Pragma then
            Result (Index) := List (I);
            Index := Index + 1;
         end if;
      end loop;
      return Result (Result'First .. Index - 1);
   end Without_Pragmas;

